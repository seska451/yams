{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yet Another Mission Script","text":"<p>Info</p> <p>This is a very new project and so it may not have all the features you are looking for right now. If this is the case I can highly recommend having a look at:</p> <ul> <li>S.S.E - The basic API from Eagle Dynamics</li> <li>M.O.O.S.E - An extremely powerful solution</li> <li>Mist</li> </ul>"},{"location":"#so-why-yams","title":"So ...why YAMS?","text":"<p>To be honest I found most of the above frameworks to be simulaneously awesome and frustration inducing. The primary reason for this is the accessibility of the documentation in each scenario. </p> <p>The SSE docs are scant, the Mist docs are ridden with Ads, and the MOOSE docs, while comprehensive, are extremely difficult to search and learn.</p> <p>In addition, I was not a fan of the structure and function of these APIs. Rather than try and turn one around, I felt that starting again was simpler for me. Hence the name - Yet Another Mission Script.</p> <p>!!! warning This is my rifle.      There are many others like it, but this one is mine.</p>"},{"location":"#project-goals","title":"Project Goals","text":"<p>The goal of this project is to provide a mission scripter a well documented set of tools with up to date examples, even if that set of tools is small to begin with.</p> <p>Rather than solve every problem, the problems that get solved, should...</p> <ul> <li>Be well documented, with clear examples</li> <li>Have a low barrier to entry to achieve the goal of the feature</li> <li>Yield a consistent syntax that allows the editor to fall into the 'pit of success' as much as possible</li> </ul> <p>Further, I want the documentation itself to be easy to generate, clean of ads, searchable, and generally easy to use. This is why I chose mkdocs and</p>"},{"location":"#alright-lets-get-scripting","title":"Alright let's get scripting","text":"<p> Yeah! Head on over to Getting Started</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>This project only has one dependency: the Simulator Scripting Engine (SSE) which is the standard kit provided by the game - you don't need to install this. Just look for documentation regarding its use in conjunction with other frameworks.</p> <p>It is useful to know it, as it provides the basic primitives to work with to create complex scripts, like this one, and yours.</p> <p>For your convenience, I am building a reference for the SSE, here</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>Download the latest yams script</p> <p>Move the script into a folder that you can easily access while in the mission editor. <pre><code># EXAMPLE ONLY\nmv $ENV:USERPROFILE\\Downloads\\yams-dcs.min.lua\n\"$ENV:USERPROFILE\\Documents\\Saved Games\\DCS World\\Scripts\"\n</code></pre></p> <p>Open the mission editor and either create a new mission or create a new one. In the mission editor, click the triggers manager.</p> <p></p> <p>Create a new <code>trigger</code>, giving it a <code>condition</code> to wait for 1 second. Set the <code>action</code> to <code>DO SCRIPT FILE</code> and select the <code>yams-dcs.lua</code> file from your filesystem</p> <p></p> <p>This concludes the process for loading yams, but now you want to build your own scripts around it.</p>"},{"location":"getting-started/#adding-your-first-script","title":"Adding your first script","text":"<p>Now that yams is available for your use, your code can use the library in subsequent scripts.</p> <p>Create a new trigger and use a <code>FLAG ON condition</code> checking for flag <code>31337</code>, and use the <code>DO SCRIPT</code> action this time.</p> <p>Example</p> <p>In that <code>DO SCRIPT</code> block, paste in the following code:</p> <pre><code>yams.message\n:with_text(\"YAMS v0.1 loaded.\")\n:for_seconds(15)\n:clear_previous_messages()\n</code></pre> <p>When you start the mission now, you should see the following message in the upper RHS of screen.</p> <pre><code>YAMS v0.1 loaded.\n</code></pre>"},{"location":"API-reference/combat_air_patrol/","title":"Combat Air Patrol (CAP)","text":"<p>The <code>combat_air_patrol</code> fluent interface is designed to make building CAPs easy. It checks the state of the CAP every 20 seconds for you and will keep topping up the groups that are active in the world up to any limit that you set. Stops once it has run out of groups to dispatch. Only works against air units. It will even check the fuel state of the groups and tell them to refuel if required.</p> <p>This module makes plenty of assumptions in order to achieve this ease of use.</p> <p>Info</p> <p>If you want finer control, then you should look at the <code>generator</code> module instead.</p> <p>Example</p> <pre><code>yams.combat_air_patrol\n:new()                                      -- You must initialize this type\n:with_name(\"Iranian Combat Air Patrol\")     -- Optionally name this CAP squadron\n:for_squadron_size(20)                      -- Set a size for the squadron, this is the number of groups\n:using_template(\"IRANAF-MIG29\")             -- Use this template for generating groups, this dictates the # of planes per group\n:with_tanker_group(\"IRANAF-TANKER\")         -- Use this to designate a tanker for refuelling\n:with_home_base(\"Ras Al Khaimah Intl\")      -- Sets the home airbase\n:zone_to_defend(\"red-patrol-zone\")          -- Sets the CAP patrol area to defend from threats\n:no_more_than(2)                            -- Limit the number of groups that can be active at any given point in time\n:start_in_air(6000)                         -- Set the cruising altitude for this CAP (all units are in metres)\n:start()                                    -- Send them on their way.\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolusing_template","title":"combat_air_patrol:using_template","text":"<p>Example</p>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolwith_name","title":"combat_air_patrol:with_name","text":"<p>Example</p>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolno_more_than","title":"combat_air_patrol:no_more_than","text":"<p>Example</p> <pre><code>yams.combat_air_patrol:no_more_than(count)\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolstart_in_air","title":"combat_air_patrol:start_in_air","text":"<p>Example</p> <pre><code>yams.combat_air_patrol:start_in_air(altitude)\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolfor_squadron_size","title":"combat_air_patrol:for_squadron_size","text":"<p>Example</p> <pre><code>yams.combat_air_patrol:for_squadron_size(count)\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolwith_home_base","title":"combat_air_patrol:with_home_base","text":"<p>Example</p> <pre><code>yams.combat_air_patrol:with_home_base(airbase_name)\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolwith_tanker_group","title":"combat_air_patrol:with_tanker_group","text":"<p>Example</p> <pre><code>yams.combat_air_patrol:with_tanker_group(grp)\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolzone_to_defend","title":"combat_air_patrol:zone_to_defend","text":"<p>Example</p> <pre><code>yams.combat_air_patrol:zone_to_defend(zone)\n</code></pre>"},{"location":"API-reference/combat_air_patrol/#combat_air_patrolstart","title":"combat_air_patrol:start","text":"<p>Starts the CAP with the settings you've provided earlier</p> <p>Example</p> <pre><code>local cap = yams.combat_air_patrol\ncap\n:new()\n:with_name(\"Iranian Combat Air Patrol\")\n:for_squadron_size(20)\n:using_template(\"IRANAF-MIG29\")\n:with_tanker_group(\"IRANAF-TANKER\")\n:with_home_base(\"Ras Al Khaimah Intl\")\n:zone_to_defend(\"red-patrol-zone\")\n:no_more_than(2) -- groups\n:start_in_air(6000) -- metres\n:start()\n</code></pre>"},{"location":"API-reference/config/","title":"Config","text":"<p>Yams is designed to minimize the amount of config you need to worry about. Whatever there is to worry about lives here though.</p> <p>Example</p> <pre><code>local cfg = yams.config\ncfg:set_debug(true)         -- turns on verbose logging into your DCS.log\n</code></pre>"},{"location":"API-reference/config/#configset_debug","title":"config:set_debug","text":""},{"location":"API-reference/config/#debug-configuration","title":"Debug Configuration","text":"<p>Example</p> <p>If you need to see how yams is working under the hood, then you can use the <code>set_debug</code> &amp; <code>get_debug</code> property accessors in your scripts to enable debug logging. <pre><code>local cfg = yams.config\ncfg:set_debug(true)         -- turns on verbose logging into your DCS.log\nif cfg:get_debug() then\n-- do something else\nend\n</code></pre></p> <p>]] function config:set_debug(val)     env.info(\"[DEBUG] setting debug to \" .. tostring(val))     self.debug = val     return self end</p> <p>--[[ config:get_debug Gets the value of the debug <code>config</code> property</p> <p>Example</p> <pre><code>local is_debug =\nyams.config:get_debug()\nif is_debug then\n-- do something\nend\n</code></pre>"},{"location":"API-reference/enums/","title":"Enums","text":"<p>The enums table defines the many static values that are used in the mission editor.</p> <ul> <li>rules_of_engagement - dictates how a unit may use weapons</li> <li>reaction_to_threat - dictates how a unit may react to threats</li> <li>waypoint_type - dictates how a unit should deal with a waypoint</li> </ul>"},{"location":"API-reference/enums/#enumswaypoint_type","title":"enums:waypoint_type","text":"<p>The choices for each waypoint for how a vehicle will interact with the waypoint.</p> <p>Example</p> <pre><code>local wp_type = yams.enums.waypoint_type.TAKEOFF\n</code></pre>"},{"location":"API-reference/enums/#enumsrules_of_engagement","title":"enums:rules_of_engagement","text":"index value summary 0 WEAPON_FREE Use weapons against any enemy target 1 PRIORITY_DESIGNATED Use weapons, against enemy targets in order of priority 2 ONLY_DESIGNATED Use weapons, against only designated enemy targets 3 RETURN_FIRE Use weapons, against only enemy units that are firing on this unit 4 WEAPON_HOLD Do not use weapons"},{"location":"API-reference/enums/#enumsreaction_to_threat","title":"enums:reaction_to_threat","text":"index value summary 0 NO_REACTION Do not react to threats 1 PASSIVE_DEFENCE Passively defend against threats (e.g. staying out of range) 2 EVADE_FIRE When fired upon, attempt to evade incoming missiles or bullets 3 BYPASS_AND_ESCAPE Avoid confrontation by evading fire, while re-routing to complete mission objectives. 4 ALLOW_ABORT_MISSION Avoid confrontation by evading fire and return to base (RTB)."},{"location":"API-reference/enums/#enumsairbases","title":"enums:airbases","text":"<p>The following airbases are available to use in yams</p> <p>Example</p> <pre><code>local home_plate = yams.airbases.persian_gulf.ras_al_khaimah_intl\n</code></pre>"},{"location":"API-reference/enums/#maps","title":"Maps","text":""},{"location":"API-reference/enums/#persian-gulf","title":"Persian Gulf","text":"property value ras_al_khaimah_intl Ras Al Khaimah Intl"},{"location":"API-reference/flag/","title":"Flag","text":"<p>Use the <code>flag</code> module to manage user flags in the game.</p>"},{"location":"API-reference/flag/#properties-methods","title":"Properties &amp; Methods","text":"property type summary flag_index int the unique number representing the flag. value int the numeric value of the flag. Non-zero values are considered 'true' set method Sets a flag to 'true' unset method Sets a flag to 'false' set_value method Sets a flag to a given value clear_previous_messages method Determines if the previous messages should be cleared <p>Example</p> <pre><code>yams.flag\n:set(31337)                 -- Sets Flag #31337 to true\n:unset(30)                  -- Sets Flag #30 to false\n:set_value(420, 8145317)    -- Sets Flag #420 to the number 8145317\n</code></pre> <p>Info</p> <p>The <code>yams.flag</code> object is useful for storing binary state as flags. DCS uses flags to communicate across triggers and steps. For example, a trigger may use a condition that checks is a flag is set or not, before executing its action.</p>"},{"location":"API-reference/flag/#flagset_value","title":"flag:set_value","text":"<p>Sets the value of a given flag referred to by index.</p>"},{"location":"API-reference/flag/#flagset","title":"flag:set","text":"<p>Sets a flag to ON.</p>"},{"location":"API-reference/flag/#flagunset","title":"flag:unset","text":"<p>Sets a flag to OFF</p>"},{"location":"API-reference/generator/","title":"Generator","text":"<p>The generator module allows you to dynamically generate units, groups &amp; static objects on the fly.</p> <p>Example</p> <p>The following example is lifted directly from the random_air_traffic module, because it uses <code>generator</code> under the hood. <pre><code>generator\n:new()\n:using_template(template)              -- sets the template\n:from_pool_of(pool_size):groups()      -- sets the original count of groups available\n:generate(max_groups):groups()         -- sets how many groups to spawn at once\n:every(20):seconds()                   -- sets the generation interval\n:until_there_are(max_groups):groups()  -- sets the maximum number of active groups\n:at_random_locations(coordinates)      -- sets the locations in which these groups could appear\n:at_altitude(start_altitude)           -- sets the altitude at which these groups appear\n:with_rules_of_engagement(roe)         -- sets the ROE for the groups\n:with_reaction_to_threat(rtt)          -- sets the RTT for the groups\n:spawn()                               -- kicks it all off\n</code></pre></p>"},{"location":"API-reference/generator/#generatornew","title":"generator:new","text":"<p>Initializes the generator.</p> <p>Warning</p> <p>You need to do this before each call to start in order for this module to work correctly.</p>"},{"location":"API-reference/generator/#generatorfrom_pool_of","title":"generator:from_pool_of","text":"<p>Example</p> <pre><code>yams.generator:from_pool_of(count)\n</code></pre>"},{"location":"API-reference/generator/#generatordeep_clone","title":"generator:deep_clone","text":"<p>You won't typically need this however I've left this public just in case. Use this to create a deep, recursive clone of any table. Useful for spawning units and groups based on templates. Typically used by other generator functions.deep_clone</p> <p>Warning</p> <p>This function will not do the job of renaming the cloned groups so be careful when adding the group or unit to a coalition.deep_clone There is the generator:get_next_unit_name and generator:get_next_group_name to assist with this.</p> <p>Example</p> <pre><code>local group = group:find(\"My group\")\nlocal clone = generator:deep_clone(group, nil)\n</code></pre>"},{"location":"API-reference/generator/#generatorgroups","title":"generator:groups","text":"<p>Example</p> <pre><code>yams.generator:groups()\n</code></pre>"},{"location":"API-reference/generator/#generatorgenerate","title":"generator:generate","text":"<p>Generate <code>count</code> groups everytime <code>interval</code> elapses.</p>"},{"location":"API-reference/generator/#generatorevery","title":"generator:every","text":"<p>Set the generation interval. When this elapses a series of checks are performed. If they pass, another generation of groups are spawned into the world.</p> <p>Example</p> <pre><code>yams.generator:every(interval_in_seconds)\n</code></pre>"},{"location":"API-reference/generator/#generatorminutes","title":"generator:minutes","text":"<p>Example</p> <pre><code>yams.generator:minutes()\n</code></pre>"},{"location":"API-reference/generator/#generatorseconds","title":"generator:seconds","text":"<p>Example</p> <pre><code>yams.generator:seconds()\n</code></pre>"},{"location":"API-reference/generator/#generatorwith_rules_of_engagement","title":"generator:with_rules_of_engagement","text":"<p>Example</p> <pre><code>yams.generator:with_rules_of_engagement(roe)\n</code></pre>"},{"location":"API-reference/generator/#generatorwith_reaction_to_threat","title":"generator:with_reaction_to_threat","text":"<p>Example</p> <pre><code>yams.generator:with_reaction_to_threat(rtt)\n</code></pre>"},{"location":"API-reference/generator/#generatorusing_template","title":"generator:using_template","text":"<p>Set the group name you wish to target for generation.</p>"},{"location":"API-reference/generator/#generatorat_random_locations","title":"generator:at_random_locations","text":"<p>Provide a table of coordinates to randomly choose when spawning units</p>"},{"location":"API-reference/generator/#generatorno_more_than","title":"generator:no_more_than","text":"<p>Limit the generation to have no more than <code>max</code> units</p>"},{"location":"API-reference/generator/#generatorexactly","title":"generator:exactly","text":"<p>Limit the generation to have exactly <code>count</code> units</p>"},{"location":"API-reference/generator/#generatorget_next_group_name","title":"generator:get_next_group_name","text":"<p>Given a group name <code>baseName</code> as a template, find the next group name</p>"},{"location":"API-reference/generator/#generatorget_next_unit_name","title":"generator:get_next_unit_name","text":"<p>Given a unit name <code>baseName</code> as a template, find the next unit name</p>"},{"location":"API-reference/generator/#generatorwith_starting_location","title":"generator:with_starting_location","text":"<p>Set the starting position of generated spawns. Defaults to in air.</p>"},{"location":"API-reference/generator/#generatorwith_home_base","title":"generator:with_home_base","text":""},{"location":"API-reference/generator/#generatorwith_home_base_1","title":"generator:with_home_base","text":""},{"location":"API-reference/generator/#generatorat_altitude","title":"generator:at_altitude","text":"<p>Example</p> <pre><code>yams.generator:at_altitude(altitude)\n</code></pre>"},{"location":"API-reference/generator/#generatorclone_group","title":"generator:clone_group","text":"<p>Clones a template group <code>template_group_name</code> to a new group name (format: <code>template_group_name-N</code>) and new position.</p>"},{"location":"API-reference/generator/#generatordefending_zone","title":"generator:defending_zone","text":"<p>Example</p> <pre><code>yams.generator:defending_zone(zone)\n</code></pre>"},{"location":"API-reference/generator/#generatorrefuelling_at","title":"generator:refuelling_at","text":"<p>Example</p> <pre><code>yams.generator:refuelling_at(tanker_group)\n</code></pre>"},{"location":"API-reference/generator/#generatorspawn_over_time","title":"generator:spawn_over_time","text":"<p>Starts spawning groups over time, given the parameters set by other functions.position</p> <p>You might use this with the <code>using_group</code>, <code>at_random_locations</code>, <code>no_less_than</code> and <code>no_more_than</code> functions.</p> <p>Example</p> <pre><code>local my_gen = yams.generator\nmy_gen\n:using_group(\"My late activated group template\")\n:at_random_locations({ coord1, coord2, coord3 })\n:no_more_than(10)\n:no_less_than(1)\n:spawn_over_time()\n</code></pre>"},{"location":"API-reference/generator/#generatorspawn_once","title":"generator:spawn_once","text":""},{"location":"API-reference/group/","title":"Group","text":"<p>All helper functions to do with group management</p>"},{"location":"API-reference/group/#groupfind","title":"group:find","text":"<p>Find a group by its name.</p> <p>Example</p> <pre><code>local group = yams.group:find(\"RAAF-FA18C\")\n</code></pre>"},{"location":"API-reference/group/#groupget_country","title":"group:get_country","text":"<p>Gets the country ID for a given group, based on the first unit in the group.</p>"},{"location":"API-reference/logger/","title":"Logger","text":"<p>The <code>logger</code> is the entry point for functions to do with logging to DCS.log. You can access it via <code>yams.logger</code>.</p> <p>Example</p> <pre><code>local log = yams.logger\nlog:info(\"Splash One Lizard\")\n</code></pre>"},{"location":"API-reference/logger/#loggerinfo","title":"logger:info","text":"<p>Writes an info level message to the DCS Log.</p> param type summary message string The message you want to print into the log file. <p>Example</p> <pre><code>local log = yams.logger\nlog:info(\"Splash One Lizard\")\n</code></pre>"},{"location":"API-reference/logger/#loggerwarn","title":"logger:warn","text":"<p>Writes a warning level message to the DCS Log.</p> param type summary message string The message you want to print into the log file. <p>Example</p> <pre><code>local log = yams.logger\nlog:warn(\"Bogey on your six\")\n</code></pre>"},{"location":"API-reference/logger/#loggererror","title":"logger:error","text":"<p>Writes an error level message to the DCS Log.</p> param type summary message string The message you want to print into the log file. <p>Example</p> <pre><code>local log = yams.logger\nlog:error(\"Joker Fuel.\")\n</code></pre> <p>]] function log:error(message)     env.error(log.context .. \" \" .. message, false) end</p> <p>--[[ logger:set_context</p>"},{"location":"API-reference/logger/#loggerclear_context","title":"logger:clear_context","text":""},{"location":"API-reference/logger/#loggerdebug","title":"logger:debug","text":""},{"location":"API-reference/message/","title":"Message","text":"<p>Info</p> <p>The <code>yams.message</code> object is useful for sending messages to coalitions, groups, and units.</p> <p>Messages are the primary way to communicate information to players and can often be seen in both PVE and PVP, solo and multiplayer scenarios.</p>"},{"location":"API-reference/message/#properties-methods","title":"Properties &amp; Methods","text":"property type summary text string the text to be sent. time int the time to display the text for. should_clear bool If true, clears the previous messages. with_text method Sets the message text for_seconds method Sets the message timer clear_previous_messages method Determines if the previous messages should be cleared <p>Example</p> <pre><code>yams.message\n:with_text(\"Hello, YAMS!\")  -- Output Hello, YAMS!\n:for_seconds(30)            --    for 30 seconds\n:clear_previous_messages()  --    clearing the previous messages\n:send()                     --    send to all players\n</code></pre>"},{"location":"API-reference/message/#messagewith_text","title":"message:with_text","text":"<p>Adds text to an ephemeral message shown to the user on the upper RHS of the screen.</p> param type summary txt string the text to be sent. <p>Returns self</p> <p>Example</p> <pre><code>yams.message\n:with_text(\"Hello, YAMS!\")\n:send() -- sends to all players in all coalitions\n</code></pre>"},{"location":"API-reference/message/#messagefor_seconds","title":"message:for_seconds","text":"<p>Sets the message duration</p> param type summary seconds int the number of seconds to apply the message to the screen before it is erased. Defaults to 10 seconds <p>Returns self</p> <p>Example</p> <pre><code>yams.message\n:with_text(\"Hello, YAMS!\")\n:for_seconds(5)\n:send() -- sends to all players in all coalitions\n</code></pre>"},{"location":"API-reference/message/#messageclear_previous_messages","title":"message:clear_previous_messages","text":"<p>Upon displaying this message, remove all other messages</p> <p>Returns self</p> <p>Example</p> <pre><code>yams.message\n:with_text(\"Hello, YAMS!\")\n:clear_previous_messages()\n:send() -- sends to all players in all coalitions\n</code></pre>"},{"location":"API-reference/message/#messagesend","title":"message:send","text":"<p>Display this message, to all players, in all coalitions. Messages appear in the upper RHS of the screen.</p> <p>Returns self</p> <p>Example</p> <pre><code>local msg = yams.message:with_text(\"Bingo fuel\"):to_coalition(coalition.side.RED)\n-- later\nmsg:send()\n</code></pre>"},{"location":"API-reference/random_air_traffic/","title":"Random air traffic","text":"<p>Generates random air traffic (RAT) based on a template group. Yams will spawn no more than the desired number of groups. It will schedule a check every 60 seconds to ensure there is enough aircraft in the sky.</p> <p>For best results, set the template group to late activation to supress it from being spawned on startup. This saves a bit of CPU processing for you.</p> <p>Info</p> <p>This function is a convenience over the generator:spawn function it is basically an opinionated wrapper. If you want more control, check out the <code>generator</code> module.</p> <p>Example</p> <pre><code>local rat = yams.random_air_traffic\nlocal positions = {\n}\nrat                             -- configure the RAT\n:using_group(\"RAAF F18C\")   -- tell it the name of the group to use for the traffic\n:no_more_than(10)           -- configure the maximum number of groups in the air\n:start_from_air(4500)        -- (Optional) tell the RAT to start planes at a specific altitude\n:init()\n</code></pre>"},{"location":"API-reference/random_air_traffic/#random_air_trafficwith_rules_of_engagement","title":"random_air_traffic:with_rules_of_engagement","text":"<p>By default, air traffic will have zero aggression and will land at the first sign of trouble. It's primary use case is for modelling civilian air traffic.</p> <p>This behaviour may be adjusted with this function to observe different <code>rules_of_engagement</code> &amp; <code>reaction_to_threat</code>. This applies to every aircraft. If you wish to use the behaviour set in the aircraft template, use <code>yams.enums.rules_of_engagement.inherit</code>.</p> <p>Example</p> <pre><code>local rat = yams.random_air_traffic\nlocal weapons_free = yams.enums.rules_of_engagement.WEAPONS_FREE\nlocal evade_fire = yams.enums.reaction_to_threat.EVADE_FIRE\nrat\n:with_name(\"Iranian Combat Air Patrol\")\n:using_group(\"IRANAF-CAP\")\n:no_more_than(5)\n:start_in_air(4500)\n:with_rules_of_engagement(weapons_free)\n:with_reaction_to_threat(evade_fire)\n:init()\n</code></pre>"},{"location":"API-reference/random_air_traffic/#random_air_trafficwith_reaction_to_threat","title":"random_air_traffic:with_reaction_to_threat","text":"<p>Example</p> <pre><code>yams.random_air_traffic:with_reaction_to_threat(rtt)\n</code></pre>"},{"location":"API-reference/random_air_traffic/#random_air_trafficwith_name","title":"random_air_traffic:with_name","text":"<p>Gives this random air traffic a name to identify it by, which is displayed in logs</p>"},{"location":"API-reference/random_air_traffic/#random_air_trafficusing_template","title":"random_air_traffic:using_template","text":"<p>Use a <code>group_name</code> to find a late activated template group for use in random air traffic generation</p>"},{"location":"API-reference/random_air_traffic/#random_air_trafficno_more_than","title":"random_air_traffic:no_more_than","text":"<p>Set the maximum number of aircraft spawned for random air traffic</p>"},{"location":"API-reference/random_air_traffic/#random_air_trafficfrom_pool_of","title":"random_air_traffic:from_pool_of","text":"<p>Example</p> <pre><code>yams.random_air_traffic:from_pool_of(count)\n</code></pre>"},{"location":"API-reference/random_air_traffic/#random_air_trafficstart_in_air","title":"random_air_traffic:start_in_air","text":"<p>Tells all traffic to be spawned in the air at a given altitude</p>"},{"location":"API-reference/random_air_traffic/#random_air_trafficget_airbase_positions_for","title":"random_air_traffic:get_airbase_positions_for","text":"<p>Example</p> <pre><code>yams.random_air_traffic:get_airbase_positions_for(coalition)\n</code></pre>"},{"location":"API-reference/random_air_traffic/#random_air_trafficstart","title":"random_air_traffic:start","text":"<p>Final call in the random_air_traffic fluent API. Use this to start random air traffic using the parameters set by previous calls.</p>"},{"location":"API-reference/utils/","title":"Utils","text":"<p>Every project has a bucket of slightly useful functions, this is yams:utils. ]]-- local utils = { }</p> <p>--[[ utils:serialize</p> <p>Example</p> <p><pre><code>local my_table = {\nbunch = \"of stuff\",\nright_here = {\nfoo = 1,\nbar = 2,\nbaz = function() do\nreturn tointeger(\"3\")\nend\n}\n}\nlocal indent = 2 -- spaces\nprint(yams.utils:serialize(my_table, indent))\n</code></pre> This will output the following to console: <pre><code>{\n    bunch = \"of stuff\",\n    right_here = {\n        foo = 1,\n        bar = 2\n    }\n}\n</code></pre></p>"},{"location":"API-reference/yams/","title":"Yams","text":"<p>The <code>yams</code> singleton is the entry point into the YAMS API. See Getting Started to learn how to load YAMS into your mission.</p> <p>There are several modules and methods you can use from yams.</p>"},{"location":"API-reference/yams/#modules","title":"Modules","text":""},{"location":"API-reference/yams/#message","title":"message","text":"<p>The message module is the entry point in to anything to do with sending information to players in the game.info</p>"},{"location":"API-reference/yams/#flag","title":"flag","text":"<p>The flag module assists with setting and reading flag data.</p>"},{"location":"API-reference/yams/#methods","title":"Methods","text":""},{"location":"API-reference/yams/#logging-methods","title":"Logging methods","text":"<p>The main way to print out debugging related information is via DCS.log which you can find in your <code>$ENV:USERPROFILE\\Saved Games\\DCS.openbeta\\Logs\\dcs.log</code></p> <p>So if your username is <code>sandra</code> and your profile is on the C:\\ drive you can find your log file at <code>C:\\Users\\sandra\\Saved Games\\DCS.openbeta\\Logs\\dcs.log</code></p> <p>The following log functions are supported:</p> <ul> <li>info</li> <li>warn</li> <li>error</li> </ul> <p>Example</p> <pre><code>yams.flag:set(1337) -- sets the 1337 flag ON\n</code></pre>"},{"location":"API-reference/zone/","title":"Zone","text":"<p>Use the <code>zone</code> module to find, create and manage zone.</p>"},{"location":"API-reference/zone/#zonenew","title":"zone:new","text":"<p>Example</p> <pre><code>yams.zone:()\n</code></pre>"},{"location":"API-reference/zone/#zonevalidate","title":"zone:validate","text":"<p>Example</p> <pre><code>yams.zone:validate()\n</code></pre>"},{"location":"API-reference/zone/#zoneset_name","title":"zone:set_name","text":"<p>Example</p> <pre><code>yams.zone:set_name(name)\n</code></pre>"},{"location":"API-reference/zone/#zoneset_zone_type","title":"zone:set_zone_type","text":"<p>Example</p> <pre><code>yams.zone:set_zone_type(zone_type)\n</code></pre>"},{"location":"API-reference/zone/#zonefind","title":"zone:find","text":"<p>Example</p> <pre><code>yams.zone:find(name)\n</code></pre>"},{"location":"SSE%20Reference/home/","title":"Home","text":"<p>Info</p> <p>This is a very new project and so it may not have all the documentation you are looking for right now. If this is the case I can highly recommend having a look at Simulator Scripting Environment on Hoggit as it covers all of the content you would find here.</p> <p>The DCS Simulator Scripting Engine (SSE) is the foundation from which all missions are built. It is useful to learn how this works when implementing your own scripts.</p> <p>You can use the SSE functionality alongside YAMS to create some awesome gaming experience for other pilots and players of DCS World.</p>"},{"location":"SSE%20Reference/home/#classes","title":"Classes","text":"Name Purpose Object Root object for many of the placeable elements in the editor. Group Groups are a way to refer to a set of in game units that typically work together in some way. Controller Spot Represents a spot on the ground targeted by a laser. SceneryObject CoalitionObject Unit Airbase Weapon StaticObject"},{"location":"SSE%20Reference/home/#modules","title":"Modules","text":"Name Purpose env timer land atmosphere world coalition Entry point to information on the all of the units within the mission. trigger coord missionCommands VoiceChat net <p>Represents a </p>"},{"location":"SSE%20Reference/home/#enumerations","title":"Enumerations","text":"Name Purpose country List of all the supported countries AI world radio trigger coalition Defines the supported coalitions and services weapon callsign formation attributes"},{"location":"SSE%20Reference/classes/Object/","title":"Object","text":""},{"location":"SSE%20Reference/classes/Object/#scenery-object","title":"Scenery Object","text":""},{"location":"SSE%20Reference/classes/Object/#coalition-object","title":"Coalition Object","text":""},{"location":"SSE%20Reference/classes/Object/#unit","title":"Unit","text":""},{"location":"SSE%20Reference/classes/Object/#airbase","title":"Airbase","text":""},{"location":"SSE%20Reference/classes/Object/#weapon","title":"Weapon","text":""},{"location":"SSE%20Reference/classes/Object/#static-object","title":"Static Object","text":""},{"location":"SSE%20Reference/enumerations/AI/","title":"AI","text":""},{"location":"SSE%20Reference/enumerations/attributes/","title":"Attributes","text":""},{"location":"SSE%20Reference/enumerations/callsign/","title":"Callsign","text":""},{"location":"SSE%20Reference/enumerations/coalition/","title":"Coalition","text":"<p>The coalition object is small, but it has some important properties: <code>coalition</code> and <code>service</code>.</p> <p>Example</p> <pre><code>local red_for = coalition.side.RED\nlocal all_awacs = coalition.service.AWACS\n</code></pre>"},{"location":"SSE%20Reference/enumerations/coalition/#sides","title":"Sides","text":"<p>There are three coalitions, red, blue and neutral. The SSE defines these has</p> name number NEUTRAL 0 RED 1 BLUE 2 <p>Example</p> <p>You can use these in your own code to reference coalitions. For example - using the yams.messaging module:</p> <pre><code>yams.message\n:with_text(\"This should only go to the blue coalition\")\n:to_coalition(coalition.side.BLUE)\n:send()\n</code></pre>"},{"location":"SSE%20Reference/enumerations/coalition/#services","title":"Services","text":"<p>Each coalition houses a series of services that are provided to the whole coalition.</p> name number meaning ATC 0 Air Traffic Control - tells us when/where to land AWACS 1 Airborne Warning and Control Service - tells us where threats are TANKER 2 Airborne Refuelling Services FAC 3 Forward Air Controller - tells us where our targets are during Close Air Support"},{"location":"SSE%20Reference/enumerations/country/","title":"Coalition","text":""},{"location":"SSE%20Reference/enumerations/formation/","title":"Formation","text":""},{"location":"SSE%20Reference/enumerations/radio/","title":"Radio","text":""},{"location":"SSE%20Reference/enumerations/trigger/","title":"Trigger","text":""},{"location":"SSE%20Reference/enumerations/weapon/","title":"Weapon","text":""},{"location":"SSE%20Reference/enumerations/world/","title":"World","text":""},{"location":"SSE%20Reference/modules/VoiceChat/","title":"VoiceChat","text":""},{"location":"SSE%20Reference/modules/atmosphere/","title":"Atmosphere","text":""},{"location":"SSE%20Reference/modules/coalition/","title":"Coalition","text":""},{"location":"SSE%20Reference/modules/coord/","title":"Coord","text":""},{"location":"SSE%20Reference/modules/env/","title":"Env","text":""},{"location":"SSE%20Reference/modules/land/","title":"Land","text":""},{"location":"SSE%20Reference/modules/missionCommands/","title":"MissionCommands","text":""},{"location":"SSE%20Reference/modules/net/","title":"Net","text":""},{"location":"SSE%20Reference/modules/timer/","title":"Timer","text":""},{"location":"SSE%20Reference/modules/trigger/","title":"Trigger","text":""},{"location":"SSE%20Reference/modules/world/","title":"World","text":""}]}